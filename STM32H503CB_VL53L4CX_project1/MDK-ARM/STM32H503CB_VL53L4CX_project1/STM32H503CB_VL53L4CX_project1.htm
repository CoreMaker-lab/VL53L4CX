<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32H503CB_VL53L4CX_project1\STM32H503CB_VL53L4CX_project1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32H503CB_VL53L4CX_project1\STM32H503CB_VL53L4CX_project1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Wed Nov 27 22:14:48 2024
<BR><P>
<H3>Maximum Stack Usage =       1120 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
VL53L4CX_GetDistance &rArr; VL53LX_GetMultiRangingData &rArr; VL53LX_get_device_results &rArr; VL53LX_ipp_hist_process_data &rArr; VL53LX_hist_process_data &rArr; VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5f]">BSP_GetTick</a> from custom_bus.o(.text.BSP_GetTick) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5c]">BSP_I2C1_DeInit</a> from custom_bus.o(.text.BSP_I2C1_DeInit) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5b]">BSP_I2C1_Init</a> from custom_bus.o(.text.BSP_I2C1_Init) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5e]">BSP_I2C1_Recv</a> from custom_bus.o(.text.BSP_I2C1_Recv) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5d]">BSP_I2C1_Send</a> from custom_bus.o(.text.BSP_I2C1_Send) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[57]">COMP1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[45]">CRS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2c]">DAC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[50]">DTS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2e]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[22]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[23]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[24]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[25]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[26]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[27]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[46]">GPDMA2_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[47]">GPDMA2_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[48]">GPDMA2_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[49]">GPDMA2_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4a]">GPDMA2_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4b]">GPDMA2_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4c]">GPDMA2_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4d]">GPDMA2_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[10]">GTZC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[52]">HASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[54]">I3C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[53]">I3C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[56]">I3C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[55]">I3C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4f]">ICACHE_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2a]">IWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[42]">LPTIM1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[43]">LPTIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[41]">LPUART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h5xx_it.o(.text.NMI_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32h5xx_it.o(.text.PendSV_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[e]">RAMCFG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[51]">RNG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h5xx_it.o(.text.SVC_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32h5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32h5xx.o(.text.SystemInit) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[d]">TAMP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[44]">USB_DRD_FS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[67]">VL53L4CX_ConfigIT</a> from vl53l4cx.o(.text.VL53L4CX_ConfigIT) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[65]">VL53L4CX_ConfigProfile</a> from vl53l4cx.o(.text.VL53L4CX_ConfigProfile) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[66]">VL53L4CX_ConfigROI</a> from vl53l4cx.o(.text.VL53L4CX_ConfigROI) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[62]">VL53L4CX_DeInit</a> from vl53l4cx.o(.text.VL53L4CX_DeInit) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6c]">VL53L4CX_GetAddress</a> from vl53l4cx.o(.text.VL53L4CX_GetAddress) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[64]">VL53L4CX_GetCapabilities</a> from vl53l4cx.o(.text.VL53L4CX_GetCapabilities) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[68]">VL53L4CX_GetDistance</a> from vl53l4cx.o(.text.VL53L4CX_GetDistance) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6e]">VL53L4CX_GetPowerMode</a> from vl53l4cx.o(.text.VL53L4CX_GetPowerMode) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[61]">VL53L4CX_Init</a> from vl53l4cx.o(.text.VL53L4CX_Init) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[63]">VL53L4CX_ReadID</a> from vl53l4cx.o(.text.VL53L4CX_ReadID) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6b]">VL53L4CX_SetAddress</a> from vl53l4cx.o(.text.VL53L4CX_SetAddress) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6d]">VL53L4CX_SetPowerMode</a> from vl53l4cx.o(.text.VL53L4CX_SetPowerMode) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[69]">VL53L4CX_Start</a> from vl53l4cx.o(.text.VL53L4CX_Start) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6a]">VL53L4CX_Stop</a> from vl53l4cx.o(.text.VL53L4CX_Stop) referenced from vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[60]">fputc</a> from custom.o(.text.fputc) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[58]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[183]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[184]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[185]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[186]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[187]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>

<P><STRONG><a name="[2b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I3C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I3C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I3C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I3C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_DRD_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_033
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_023
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_events_per_spad_maths
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_events_consistency_check
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_phase_consistency_check
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_corrector
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_027
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_015
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_copy_and_scale_ambient_info
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_zone_config
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_031
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_005
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_011
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_copy_results_to_sys_and_core
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_zone_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMultiRangingData
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_031
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_005
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_003
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[18b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[18c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>BSP_COM_Init</STRONG> (Thumb, 196 bytes, Stack size 184 bytes, custom.o(.text.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>

<P><STRONG><a name="[5f]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custom_bus.o(.text.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5c]"></a>BSP_I2C1_DeInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, custom_bus.o(.text.BSP_I2C1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_I2C1_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5b]"></a>BSP_I2C1_Init</STRONG> (Thumb, 242 bytes, Stack size 200 bytes, custom_bus.o(.text.BSP_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BSP_I2C1_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5e]"></a>BSP_I2C1_Recv</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, custom_bus.o(.text.BSP_I2C1_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_I2C1_Recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5d]"></a>BSP_I2C1_Send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, custom_bus.o(.text.BSP_I2C1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_I2C1_Send &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>CUSTOM_RANGING_SENSOR_ConfigProfile</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_ConfigProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_ConfigProfile
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[b7]"></a>CUSTOM_RANGING_SENSOR_GetCapabilities</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[bb]"></a>CUSTOM_RANGING_SENSOR_GetDistance</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_GetDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[88]"></a>CUSTOM_RANGING_SENSOR_Init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CUSTOM_RANGING_SENSOR_Init &rArr; VL53L4CX_ReadID &rArr; VL53LX_RdWord
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_ReadID
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>

<P><STRONG><a name="[b6]"></a>CUSTOM_RANGING_SENSOR_ReadID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[b9]"></a>CUSTOM_RANGING_SENSOR_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 250 bytes, Stack size 44 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[7d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 44 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[84]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[86]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Recv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Send
</UL>

<P><STRONG><a name="[82]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_I2C_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[85]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Recv
</UL>

<P><STRONG><a name="[87]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Send
</UL>

<P><STRONG><a name="[8c]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[8e]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_ICACHE_ConfigAssociativityMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h5xx_hal_icache.o(.text.HAL_ICACHE_ConfigAssociativityMode))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h5xx_hal_icache.o(.text.HAL_ICACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[94]"></a>HAL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>HAL_InitTick</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32h5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_GetCLKSourceConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32h5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[95]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 1920 bytes, Stack size 24 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[7c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1732 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[a3]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_GetPCLK3Freq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK3Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1610 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[97]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9a]"></a>HAL_SYSTICK_GetCLKSourceConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_GetCLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h5xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UART_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_Transmit</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>MX_GPIO_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>MX_I2C1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, custom_bus.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[af]"></a>MX_ICACHE_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icache.o(.text.MX_ICACHE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_ICACHE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_ConfigAssociativityMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>MX_TOF_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_tof.o(.text.MX_TOF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MX_TOF_Init &rArr; BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>MX_TOF_Process</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, app_tof.o(.text.MX_TOF_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TOF_Process &rArr; putchar &rArr; fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Start
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_GetDistance
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_ConfigProfile
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_GetCapabilities
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_ReadID
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, custom.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>SystemClock_Config</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, system_stm32h5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32h5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>UART_CheckIdleState</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32h5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>UART_SetConfig</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, stm32h5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 848 bytes, Stack size 24 bytes, stm32h5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>V53L1_init_zone_dss_configs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53lx_core.o(.text.V53L1_init_zone_dss_configs))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_stop_range
</UL>

<P><STRONG><a name="[178]"></a>V53L1_init_zone_results_structure</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, vl53lx_core.o(.text.V53L1_init_zone_results_structure))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_stop_range
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
</UL>

<P><STRONG><a name="[67]"></a>VL53L4CX_ConfigIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l4cx.o(.text.VL53L4CX_ConfigIT))
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[65]"></a>VL53L4CX_ConfigProfile</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_ConfigProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = VL53L4CX_ConfigProfile &rArr; VL53LX_SetDistanceMode &rArr; VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDistanceMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetMeasurementTimingBudgetMicroSeconds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[66]"></a>VL53L4CX_ConfigROI</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_ConfigROI))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L4CX_ConfigROI &rArr; VL53LX_SetUserROI &rArr; VL53LX_set_zone_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetUserROI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[62]"></a>VL53L4CX_DeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L4CX_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6c]"></a>VL53L4CX_GetAddress</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vl53l4cx.o(.text.VL53L4CX_GetAddress))
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[64]"></a>VL53L4CX_GetCapabilities</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vl53l4cx.o(.text.VL53L4CX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[68]"></a>VL53L4CX_GetDistance</STRONG> (Thumb, 2032 bytes, Stack size 40 bytes, vl53l4cx.o(.text.VL53L4CX_GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = VL53L4CX_GetDistance &rArr; VL53LX_GetMultiRangingData &rArr; VL53LX_get_device_results &rArr; VL53LX_ipp_hist_process_data &rArr; VL53LX_hist_process_data &rArr; VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMultiRangingData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMeasurementDataReady
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ClearInterruptAndStartMeasurement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6e]"></a>VL53L4CX_GetPowerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l4cx.o(.text.VL53L4CX_GetPowerMode))
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[61]"></a>VL53L4CX_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = VL53L4CX_Init &rArr; VL53LX_PerformRefSpadManagement &rArr; VL53LX_SetDistanceMode &rArr; VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_PerformRefSpadManagement
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitDeviceBooted
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[63]"></a>VL53L4CX_ReadID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vl53l4cx.o(.text.VL53L4CX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L4CX_ReadID &rArr; VL53LX_RdWord
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[8b]"></a>VL53L4CX_RegisterBusIO</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l4cx.o(.text.VL53L4CX_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L4CX_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>

<P><STRONG><a name="[6b]"></a>VL53L4CX_SetAddress</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L4CX_SetAddress &rArr; VL53LX_SetDeviceAddress &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6d]"></a>VL53L4CX_SetPowerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l4cx.o(.text.VL53L4CX_SetPowerMode))
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[69]"></a>VL53L4CX_Start</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = VL53L4CX_Start &rArr; VL53LX_StartMeasurement &rArr; VL53LX_init_and_start_range &rArr; VL53LX_i2c_encode_dynamic_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ClearInterruptAndStartMeasurement
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_StartMeasurement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6a]"></a>VL53L4CX_Stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vl53l4cx.o(.text.VL53L4CX_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L4CX_Stop &rArr; VL53LX_StopMeasurement &rArr; VL53LX_stop_range &rArr; VL53LX_set_system_control &rArr; VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_StopMeasurement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l4cx.o(.data.VL53L4CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[c9]"></a>VL53LX_ClearInterruptAndStartMeasurement</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53lx_api.o(.text.VL53LX_ClearInterruptAndStartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = VL53LX_ClearInterruptAndStartMeasurement &rArr; VL53LX_clear_interrupt_and_enable_next_range &rArr; VL53LX_init_and_start_range &rArr; VL53LX_i2c_encode_dynamic_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_clear_interrupt_and_enable_next_range
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_Start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_GetDistance
</UL>

<P><STRONG><a name="[cb]"></a>VL53LX_DataInit</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, vl53lx_api.o(.text.VL53LX_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = VL53LX_DataInit &rArr; VL53LX_data_init &rArr; VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_single_apply_disable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_apply_disable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_disable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_dmax_mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_timeouts_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_timeouts_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_preset_mode_timing_cfg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_Init
</UL>

<P><STRONG><a name="[c7]"></a>VL53LX_GetMeasurementDataReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53lx_api.o(.text.VL53LX_GetMeasurementDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_GetMeasurementDataReady &rArr; VL53LX_is_new_data_ready &rArr; VL53LX_RdByte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_is_new_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_GetDistance
</UL>

<P><STRONG><a name="[c8]"></a>VL53LX_GetMultiRangingData</STRONG> (Thumb, 1326 bytes, Stack size 160 bytes, vl53lx_api.o(.text.VL53LX_GetMultiRangingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = VL53LX_GetMultiRangingData &rArr; VL53LX_get_device_results &rArr; VL53LX_ipp_hist_process_data &rArr; VL53LX_hist_process_data &rArr; VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_compute_histo_merge_nb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_tuning_parm
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_GetDistance
</UL>

<P><STRONG><a name="[cc]"></a>VL53LX_PerformRefSpadManagement</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, vl53lx_api.o(.text.VL53LX_PerformRefSpadManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = VL53LX_PerformRefSpadManagement &rArr; VL53LX_SetDistanceMode &rArr; VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_ref_spad_char
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDistanceMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_Init
</UL>

<P><STRONG><a name="[161]"></a>VL53LX_RdByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vl53lx_platform.o(.text.VL53LX_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_wait_for_test_completion
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_device_test
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_is_new_data_ready
</UL>

<P><STRONG><a name="[cd]"></a>VL53LX_RdWord</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vl53lx_platform.o(.text.VL53LX_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_ReadID
</UL>

<P><STRONG><a name="[12e]"></a>VL53LX_ReadMulti</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vl53lx_platform.o(.text.VL53LX_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_nvm_copy_data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_customer_nvm_managed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_static_nvm_managed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_device_test
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_ref_spad_char
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[ce]"></a>VL53LX_SetDeviceAddress</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vl53lx_api.o(.text.VL53LX_SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_SetDeviceAddress &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_SetAddress
</UL>

<P><STRONG><a name="[c4]"></a>VL53LX_SetDistanceMode</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, vl53lx_api.o(.text.VL53LX_SetDistanceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VL53LX_SetDistanceMode &rArr; VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_timeouts_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_timeouts_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_preset_mode_timing_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_PerformRefSpadManagement
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_ConfigProfile
</UL>

<P><STRONG><a name="[c5]"></a>VL53LX_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, vl53lx_api.o(.text.VL53LX_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53LX_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53LX_set_timeouts_us &rArr; VL53LX_calc_timeout_register_values
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_timeouts_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_timeouts_us
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_ConfigProfile
</UL>

<P><STRONG><a name="[c6]"></a>VL53LX_SetUserROI</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, vl53lx_api.o(.text.VL53LX_SetUserROI))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53LX_SetUserROI &rArr; VL53LX_set_zone_config
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_zone_config
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_ConfigROI
</UL>

<P><STRONG><a name="[cf]"></a>VL53LX_StartMeasurement</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vl53lx_api.o(.text.VL53LX_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = VL53LX_StartMeasurement &rArr; VL53LX_init_and_start_range &rArr; VL53LX_i2c_encode_dynamic_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_load_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_Start
</UL>

<P><STRONG><a name="[d0]"></a>VL53LX_StopMeasurement</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vl53lx_api.o(.text.VL53LX_StopMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53LX_StopMeasurement &rArr; VL53LX_stop_range &rArr; VL53LX_set_system_control &rArr; VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_unload_patch
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_Stop
</UL>

<P><STRONG><a name="[ca]"></a>VL53LX_WaitDeviceBooted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53lx_api.o(.text.VL53LX_WaitDeviceBooted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_WaitDeviceBooted &rArr; VL53LX_poll_for_boot_completion &rArr; VL53LX_WaitValueMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_poll_for_boot_completion
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L4CX_Init
</UL>

<P><STRONG><a name="[17c]"></a>VL53LX_WaitMs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53lx_platform.o(.text.VL53LX_WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_wait_for_test_completion
</UL>

<P><STRONG><a name="[165]"></a>VL53LX_WaitUs</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vl53lx_platform.o(.text.VL53LX_WaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_WaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_poll_for_boot_completion
</UL>

<P><STRONG><a name="[168]"></a>VL53LX_WaitValueMaskEx</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, vl53lx_platform.o(.text.VL53LX_WaitValueMaskEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53LX_WaitValueMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_wait_for_test_completion
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_poll_for_boot_completion
</UL>

<P><STRONG><a name="[e3]"></a>VL53LX_WrByte</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vl53lx_platform.o(.text.VL53LX_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_enable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_disable_firmware
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_enable_firmware
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_disable_powerforce
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_clear_interrupt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_start_test
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_ref_spad_char_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_enable_powerforce
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_unload_patch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_load_patch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDeviceAddress
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>

<P><STRONG><a name="[166]"></a>VL53LX_WrWord</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vl53lx_platform.o(.text.VL53LX_WrWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_ref_spad_char_config
</UL>

<P><STRONG><a name="[e2]"></a>VL53LX_WriteMulti</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vl53lx_platform.o(.text.VL53LX_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_system_control
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_ref_spad_char_config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_ref_spad_char
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_PerformRefSpadManagement
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_load_patch
</UL>

<P><STRONG><a name="[138]"></a>VL53LX_calc_crosstalk_plane_offset_with_margin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_calc_crosstalk_plane_offset_with_margin))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[14b]"></a>VL53LX_calc_decoded_timeout_us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_calc_decoded_timeout_us))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_timeouts_us
</UL>

<P><STRONG><a name="[eb]"></a>VL53LX_calc_macro_period_us</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_calc_macro_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_calc_macro_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_us
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_timeouts_us
</UL>

<P><STRONG><a name="[ee]"></a>VL53LX_calc_max_effective_spads</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, vl53lx_core.o(.text.VL53LX_calc_max_effective_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53LX_calc_max_effective_spads
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[f0]"></a>VL53LX_calc_mm_effective_spads</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, vl53lx_core.o(.text.VL53LX_calc_mm_effective_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53LX_calc_mm_effective_spads
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_combine_mm1_mm2_offsets
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[11c]"></a>VL53LX_calc_pll_period_mm</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_calc_pll_period_mm))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_023
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_wrap_dmax
</UL>

<P><STRONG><a name="[ec]"></a>VL53LX_calc_pll_period_us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_calc_pll_period_us))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_018
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_macro_period_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_timeout_register_values
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_ref_spad_char_config
</UL>

<P><STRONG><a name="[160]"></a>VL53LX_calc_range_ignore_threshold</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_calc_range_ignore_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_xtalk_config_struct
</UL>

<P><STRONG><a name="[f1]"></a>VL53LX_calc_timeout_register_values</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, vl53lx_core.o(.text.VL53LX_calc_timeout_register_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_calc_timeout_register_values
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_us
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_timeouts_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
</UL>

<P><STRONG><a name="[14a]"></a>VL53LX_calc_timeout_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_calc_timeout_us))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_timeouts_us
</UL>

<P><STRONG><a name="[13c]"></a>VL53LX_check_ll_driver_rd_state</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_check_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_check_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[f2]"></a>VL53LX_clear_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_clear_interrupt &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_device_test
</UL>

<P><STRONG><a name="[d1]"></a>VL53LX_clear_interrupt_and_enable_next_range</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53lx_api_core.o(.text.VL53LX_clear_interrupt_and_enable_next_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = VL53LX_clear_interrupt_and_enable_next_range &rArr; VL53LX_init_and_start_range &rArr; VL53LX_i2c_encode_dynamic_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ClearInterruptAndStartMeasurement
</UL>

<P><STRONG><a name="[df]"></a>VL53LX_compute_histo_merge_nb</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_compute_histo_merge_nb))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMultiRangingData
</UL>

<P><STRONG><a name="[162]"></a>VL53LX_copy_hist_bins_to_static_cfg</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_copy_hist_bins_to_static_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_multizone_hist_bins_update
</UL>

<P><STRONG><a name="[139]"></a>VL53LX_copy_rtn_good_spads_to_buffer</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_copy_rtn_good_spads_to_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[133]"></a>VL53LX_copy_sys_and_core_results_to_range_results</STRONG> (Thumb, 378 bytes, Stack size 36 bytes, vl53lx_api_core.o(.text.VL53LX_copy_sys_and_core_results_to_range_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_copy_sys_and_core_results_to_range_results
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[14e]"></a>VL53LX_copy_xtalk_bin_data_to_histogram_data_struct</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_copy_xtalk_bin_data_to_histogram_data_struct))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
</UL>

<P><STRONG><a name="[d2]"></a>VL53LX_data_init</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, vl53lx_api_core.o(.text.VL53LX_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = VL53LX_data_init &rArr; VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_low_power_auto_data_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_data_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_xtalk_cal_data_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_xtalk_bin_data_struct
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_bin_data_struct
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_tuning_parm_storage_struct
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_hist_gen3_dmax_config_struct
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_hist_post_process_config_struct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_zone_cal_config_struct
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_offset_cal_config_struct
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_xtalk_extract_config_struct
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_xtalk_config_struct
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_ssc_config_struct
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_refspadchar_config_struct
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_ll_driver_state
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_version
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[ef]"></a>VL53LX_decode_row_col</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_decode_row_col))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_032
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_max_effective_spads
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_mm_effective_spads
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[146]"></a>VL53LX_decode_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_decode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
</UL>

<P><STRONG><a name="[ed]"></a>VL53LX_decode_vcsel_period</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_decode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_005
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_006
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_macro_period_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_timeout_register_values
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_ref_spad_char_config
</UL>

<P><STRONG><a name="[104]"></a>VL53LX_disable_firmware</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_disable_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_disable_firmware &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_enable
</UL>

<P><STRONG><a name="[105]"></a>VL53LX_disable_powerforce</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_disable_powerforce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_disable_powerforce &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_unload_patch
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>

<P><STRONG><a name="[10c]"></a>VL53LX_duration_maths</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_duration_maths))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_018
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
</UL>

<P><STRONG><a name="[d9]"></a>VL53LX_dynamic_xtalk_correction_apply_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_api_core.o(.text.VL53LX_dynamic_xtalk_correction_apply_disable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[107]"></a>VL53LX_dynamic_xtalk_correction_calc_new_xtalk</STRONG> (Thumb, 838 bytes, Stack size 44 bytes, vl53lx_core.o(.text.VL53LX_dynamic_xtalk_correction_calc_new_xtalk))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VL53LX_dynamic_xtalk_correction_calc_new_xtalk
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_corrector
</UL>

<P><STRONG><a name="[106]"></a>VL53LX_dynamic_xtalk_correction_corrector</STRONG> (Thumb, 1322 bytes, Stack size 56 bytes, vl53lx_core.o(.text.VL53LX_dynamic_xtalk_correction_corrector))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53LX_dynamic_xtalk_correction_corrector &rArr; VL53LX_dynamic_xtalk_correction_calc_new_xtalk
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_calc_new_xtalk
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[102]"></a>VL53LX_dynamic_xtalk_correction_data_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_dynamic_xtalk_correction_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_dynamic_xtalk_correction_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[d8]"></a>VL53LX_dynamic_xtalk_correction_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_api_core.o(.text.VL53LX_dynamic_xtalk_correction_disable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[da]"></a>VL53LX_dynamic_xtalk_correction_single_apply_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_api_core.o(.text.VL53LX_dynamic_xtalk_correction_single_apply_disable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[136]"></a>VL53LX_dynamic_zone_update</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, vl53lx_core.o(.text.VL53LX_dynamic_zone_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_dynamic_zone_update
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[108]"></a>VL53LX_enable_firmware</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_enable_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_enable_firmware &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>

<P><STRONG><a name="[109]"></a>VL53LX_enable_powerforce</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_enable_powerforce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_enable_powerforce &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_ref_spad_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_load_patch
</UL>

<P><STRONG><a name="[15a]"></a>VL53LX_encode_row_col</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_encode_row_col))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[15b]"></a>VL53LX_encode_zone_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_encode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[10a]"></a>VL53LX_events_per_spad_maths</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vl53lx_core_support.o(.text.VL53LX_events_per_spad_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53LX_events_per_spad_maths &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_018
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
</UL>

<P><STRONG><a name="[10b]"></a>VL53LX_f_001</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, vl53lx_dmax.o(.text.VL53LX_f_001))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53LX_f_001 &rArr; VL53LX_events_per_spad_maths &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_rate_maths
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_events_per_spad_maths
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_isqrt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_duration_maths
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_us
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[10f]"></a>VL53LX_f_003</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_003))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_f_003
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_bin_data_struct
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[110]"></a>VL53LX_f_005</STRONG> (Thumb, 862 bytes, Stack size 56 bytes, vl53lx_hist_core.o(.text.VL53LX_f_005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53LX_f_005
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_vcsel_period
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[112]"></a>VL53LX_f_006</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_006))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53LX_f_006
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_isqrt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[122]"></a>VL53LX_f_007</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_007))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_f_007
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[123]"></a>VL53LX_f_008</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_008))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53LX_f_008
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[124]"></a>VL53LX_f_009</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_009))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53LX_f_009
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[125]"></a>VL53LX_f_010</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_010))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53LX_f_010
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[113]"></a>VL53LX_f_011</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_011))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_f_011
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[114]"></a>VL53LX_f_014</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_014))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_023
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_022
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[117]"></a>VL53LX_f_015</STRONG> (Thumb, 698 bytes, Stack size 64 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_015))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53LX_f_015 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[128]"></a>VL53LX_f_016</STRONG> (Thumb, 2376 bytes, Stack size 104 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_016))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53LX_f_016
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[129]"></a>VL53LX_f_017</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, vl53lx_hist_algos_gen3.o(.text.VL53LX_f_017))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53LX_f_017
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[118]"></a>VL53LX_f_018</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, vl53lx_hist_core.o(.text.VL53LX_f_018))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53LX_f_018 &rArr; VL53LX_events_per_spad_maths &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_rate_per_spad_maths
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_rate_maths
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_events_per_spad_maths
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_duration_maths
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[11a]"></a>VL53LX_f_019</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, vl53lx_hist_core.o(.text.VL53LX_f_019))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_f_019 &rArr; VL53LX_range_maths
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_range_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[115]"></a>VL53LX_f_022</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53lx_hist_core.o(.text.VL53LX_f_022))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_f_022
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_026
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_014
</UL>

<P><STRONG><a name="[116]"></a>VL53LX_f_023</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, vl53lx_sigma_estimate.o(.text.VL53LX_f_023))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_mm
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_isqrt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_014
</UL>

<P><STRONG><a name="[11d]"></a>VL53LX_f_025</STRONG> (Thumb, 740 bytes, Stack size 72 bytes, vl53lx_hist_algos_gen4.o(.text.VL53LX_f_025))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_019
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_018
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_027
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_026
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_005
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_017
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_014
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_011
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_015
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_010
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_016
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_009
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_008
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_007
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_006
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_003
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_remove_ambient_bins
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_estimate_ambient_from_thresholded_bins
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_estimate_ambient_from_ambient_bins
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_calc_zero_distance_phase
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
</UL>

<P><STRONG><a name="[126]"></a>VL53LX_f_026</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, vl53lx_hist_algos_gen4.o(.text.VL53LX_f_026))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_f_026 &rArr; VL53LX_f_022
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_022
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[127]"></a>VL53LX_f_027</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, vl53lx_hist_algos_gen4.o(.text.VL53LX_f_027))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53LX_f_027 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[12a]"></a>VL53LX_f_031</STRONG> (Thumb, 964 bytes, Stack size 64 bytes, vl53lx_hist_core.o(.text.VL53LX_f_031))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53LX_f_031
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
</UL>

<P><STRONG><a name="[12b]"></a>VL53LX_f_032</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, vl53lx_xtalk.o(.text.VL53LX_f_032))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_f_032
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
</UL>

<P><STRONG><a name="[12c]"></a>VL53LX_f_033</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, vl53lx_xtalk.o(.text.VL53LX_f_033))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53LX_f_033 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
</UL>

<P><STRONG><a name="[12d]"></a>VL53LX_get_customer_nvm_managed</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, vl53lx_register_funcs.o(.text.VL53LX_get_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53LX_get_customer_nvm_managed &rArr; VL53LX_i2c_decode_customer_nvm_managed &rArr; VL53LX_i2c_decode_int16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[dd]"></a>VL53LX_get_device_results</STRONG> (Thumb, 1920 bytes, Stack size 328 bytes, vl53lx_api_core.o(.text.VL53LX_get_device_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = VL53LX_get_device_results &rArr; VL53LX_ipp_hist_process_data &rArr; VL53LX_hist_process_data &rArr; VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_low_power_auto_update_DSS
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_copy_results_to_sys_and_core
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_xmonitor_consistency_check
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_phase_consistency_check
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_wrap_dmax
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ipp_hist_process_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_max_effective_spads
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_check_ll_driver_rd_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_copy_and_scale_ambient_info
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_combine_mm1_mm2_offsets
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_xtalk_correction_corrector
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_multizone_hist_bins_update
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_dynamic_zone_update
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_low_power_auto_setup_manual_calibration
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_copy_sys_and_core_results_to_range_results
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_system_results
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_core_results
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_debug_results
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_crosstalk_plane_offset_with_margin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_copy_rtn_good_spads_to_buffer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_compute_histo_merge_nb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMultiRangingData
</UL>

<P><STRONG><a name="[135]"></a>VL53LX_get_histogram_bin_data</STRONG> (Thumb, 5660 bytes, Stack size 352 bytes, vl53lx_api_core.o(.text.VL53LX_get_histogram_bin_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = VL53LX_get_histogram_bin_data &rArr; VL53LX_hist_estimate_ambient_from_ambient_bins
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_estimate_ambient_from_ambient_bins
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_calc_zero_distance_phase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_duration_maths
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_us
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_timeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_get_bin_sequence_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint32_t
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[147]"></a>VL53LX_get_nvm_copy_data</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, vl53lx_register_funcs.o(.text.VL53LX_get_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_get_nvm_copy_data &rArr; VL53LX_ReadMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_nvm_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[d3]"></a>VL53LX_get_preset_mode_timing_cfg</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, vl53lx_api_core.o(.text.VL53LX_get_preset_mode_timing_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDistanceMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[149]"></a>VL53LX_get_static_nvm_managed</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, vl53lx_register_funcs.o(.text.VL53LX_get_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53LX_get_static_nvm_managed &rArr; VL53LX_ReadMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[d5]"></a>VL53LX_get_timeouts_us</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vl53lx_api_core.o(.text.VL53LX_get_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_get_timeouts_us &rArr; VL53LX_calc_macro_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_decoded_timeout_us
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_timeout_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_macro_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDistanceMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[de]"></a>VL53LX_get_tuning_parm</STRONG> (Thumb, 1904 bytes, Stack size 8 bytes, vl53lx_api_core.o(.text.VL53LX_get_tuning_parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_get_tuning_parm
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMultiRangingData
</UL>

<P><STRONG><a name="[11e]"></a>VL53LX_hist_calc_zero_distance_phase</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_hist_calc_zero_distance_phase))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
</UL>

<P><STRONG><a name="[13a]"></a>VL53LX_hist_combine_mm1_mm2_offsets</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, vl53lx_core.o(.text.VL53LX_hist_combine_mm1_mm2_offsets))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53LX_hist_combine_mm1_mm2_offsets &rArr; VL53LX_calc_mm_effective_spads
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_mm_effective_spads
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[13b]"></a>VL53LX_hist_copy_and_scale_ambient_info</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, vl53lx_core.o(.text.VL53LX_hist_copy_and_scale_ambient_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53LX_hist_copy_and_scale_ambient_info &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[141]"></a>VL53LX_hist_copy_results_to_sys_and_core</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, vl53lx_core.o(.text.VL53LX_hist_copy_results_to_sys_and_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_hist_copy_results_to_sys_and_core
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[120]"></a>VL53LX_hist_estimate_ambient_from_ambient_bins</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, vl53lx_core_support.o(.text.VL53LX_hist_estimate_ambient_from_ambient_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_hist_estimate_ambient_from_ambient_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
</UL>

<P><STRONG><a name="[11f]"></a>VL53LX_hist_estimate_ambient_from_thresholded_bins</STRONG> (Thumb, 748 bytes, Stack size 24 bytes, vl53lx_core_support.o(.text.VL53LX_hist_estimate_ambient_from_thresholded_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_hist_estimate_ambient_from_thresholded_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[14c]"></a>VL53LX_hist_events_consistency_check</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, vl53lx_core.o(.text.VL53LX_hist_events_consistency_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_hist_events_consistency_check &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_isqrt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_xmonitor_consistency_check
</UL>

<P><STRONG><a name="[145]"></a>VL53LX_hist_get_bin_sequence_config</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_hist_get_bin_sequence_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_hist_get_bin_sequence_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
</UL>

<P><STRONG><a name="[13f]"></a>VL53LX_hist_phase_consistency_check</STRONG> (Thumb, 1104 bytes, Stack size 96 bytes, vl53lx_core.o(.text.VL53LX_hist_phase_consistency_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53LX_hist_phase_consistency_check &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_isqrt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[14d]"></a>VL53LX_hist_process_data</STRONG> (Thumb, 462 bytes, Stack size 296 bytes, vl53lx_hist_funcs.o(.text.VL53LX_hist_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = VL53LX_hist_process_data &rArr; VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_033
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_032
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_031
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_copy_xtalk_bin_data_to_histogram_data_struct
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_bin_data_struct
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ipp_hist_process_data
</UL>

<P><STRONG><a name="[121]"></a>VL53LX_hist_remove_ambient_bins</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, vl53lx_core_support.o(.text.VL53LX_hist_remove_ambient_bins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_hist_remove_ambient_bins
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_025
</UL>

<P><STRONG><a name="[13e]"></a>VL53LX_hist_wrap_dmax</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_hist_wrap_dmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_hist_wrap_dmax
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_mm
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[140]"></a>VL53LX_hist_xmonitor_consistency_check</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, vl53lx_core.o(.text.VL53LX_hist_xmonitor_consistency_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53LX_hist_xmonitor_consistency_check &rArr; VL53LX_hist_events_consistency_check &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_events_consistency_check
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[131]"></a>VL53LX_i2c_decode_core_results</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_decode_core_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53LX_i2c_decode_core_results &rArr; VL53LX_i2c_decode_int32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_int32_t
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[12f]"></a>VL53LX_i2c_decode_customer_nvm_managed</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_decode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53LX_i2c_decode_customer_nvm_managed &rArr; VL53LX_i2c_decode_int16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_int16_t
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_customer_nvm_managed
</UL>

<P><STRONG><a name="[130]"></a>VL53LX_i2c_decode_debug_results</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_decode_debug_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_i2c_decode_debug_results
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint32_t
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[150]"></a>VL53LX_i2c_decode_int16_t</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_i2c_decode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[14f]"></a>VL53LX_i2c_decode_int32_t</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_i2c_decode_int32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_core_results
</UL>

<P><STRONG><a name="[148]"></a>VL53LX_i2c_decode_nvm_copy_data</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_decode_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_i2c_decode_nvm_copy_data
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_nvm_copy_data
</UL>

<P><STRONG><a name="[132]"></a>VL53LX_i2c_decode_system_results</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_decode_system_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_i2c_decode_system_results
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[143]"></a>VL53LX_i2c_decode_uint16_t</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_i2c_decode_uint16_t))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_decode_cal_peak_rate_map
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_system_results
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_debug_results
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_fmt_range_results_data
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_additional_offset_cal_data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_static_nvm_managed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_nvm_copy_data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[144]"></a>VL53LX_i2c_decode_uint32_t</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_i2c_decode_uint32_t))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_histogram_bin_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_core_results
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_debug_results
</UL>

<P><STRONG><a name="[151]"></a>VL53LX_i2c_encode_customer_nvm_managed</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_i2c_encode_customer_nvm_managed &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_int16_t
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[154]"></a>VL53LX_i2c_encode_dynamic_config</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_dynamic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_i2c_encode_dynamic_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[155]"></a>VL53LX_i2c_encode_general_config</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_general_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_i2c_encode_general_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[153]"></a>VL53LX_i2c_encode_int16_t</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_i2c_encode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[156]"></a>VL53LX_i2c_encode_static_config</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_static_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_i2c_encode_static_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[157]"></a>VL53LX_i2c_encode_static_nvm_managed</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_i2c_encode_static_nvm_managed &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[15d]"></a>VL53LX_i2c_encode_system_control</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_system_control))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[158]"></a>VL53LX_i2c_encode_timing_config</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_i2c_encode_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53LX_i2c_encode_timing_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint32_t
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[152]"></a>VL53LX_i2c_encode_uint16_t</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, vl53lx_core.o(.text.VL53LX_i2c_encode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_dynamic_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_timing_config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_general_config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_static_config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_customer_nvm_managed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_static_nvm_managed
</UL>

<P><STRONG><a name="[159]"></a>VL53LX_i2c_encode_uint32_t</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, vl53lx_core.o(.text.VL53LX_i2c_encode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_i2c_encode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_timing_config
</UL>

<P><STRONG><a name="[e6]"></a>VL53LX_init_and_start_range</STRONG> (Thumb, 594 bytes, Stack size 288 bytes, vl53lx_api_core.o(.text.VL53LX_init_and_start_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = VL53LX_init_and_start_range &rArr; VL53LX_i2c_encode_dynamic_config &rArr; VL53LX_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_update_ll_driver_cfg_state
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_update_ll_driver_rd_state
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_system_control
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_dynamic_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_timing_config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_general_config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_static_config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_customer_nvm_managed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_encode_static_nvm_managed
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_save_cfg_data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_encode_zone_size
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_encode_row_col
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_clear_interrupt_and_enable_next_range
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_StartMeasurement
</UL>

<P><STRONG><a name="[fd]"></a>VL53LX_init_hist_gen3_dmax_config_struct</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_hist_gen3_dmax_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[fc]"></a>VL53LX_init_hist_post_process_config_struct</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_hist_post_process_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[ff]"></a>VL53LX_init_histogram_bin_data_struct</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_init_histogram_bin_data_struct))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_003
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[16b]"></a>VL53LX_init_histogram_config_structure</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, vl53lx_core.o(.text.VL53LX_init_histogram_config_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53LX_init_histogram_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_ranging
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_medium_range
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_short_range
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_long_range
</UL>

<P><STRONG><a name="[16c]"></a>VL53LX_init_histogram_multizone_config_structure</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, vl53lx_core.o(.text.VL53LX_init_histogram_multizone_config_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53LX_init_histogram_multizone_config_structure
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_ranging
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_medium_range
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_short_range
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_long_range
</UL>

<P><STRONG><a name="[f3]"></a>VL53LX_init_ll_driver_state</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_init_ll_driver_state))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_stop_range
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_poll_for_boot_completion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[fa]"></a>VL53LX_init_offset_cal_config_struct</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_offset_cal_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[f6]"></a>VL53LX_init_refspadchar_config_struct</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_refspadchar_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[f7]"></a>VL53LX_init_ssc_config_struct</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_ssc_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[fe]"></a>VL53LX_init_tuning_parm_storage_struct</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_tuning_parm_storage_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_init_tuning_parm_storage_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[f4]"></a>VL53LX_init_version</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_init_version))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[100]"></a>VL53LX_init_xtalk_bin_data_struct</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_init_xtalk_bin_data_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[f8]"></a>VL53LX_init_xtalk_config_struct</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_xtalk_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_init_xtalk_config_struct &rArr; VL53LX_calc_range_ignore_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[f9]"></a>VL53LX_init_xtalk_extract_config_struct</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_xtalk_extract_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[fb]"></a>VL53LX_init_zone_cal_config_struct</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_init_zone_cal_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[13d]"></a>VL53LX_ipp_hist_process_data</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, vl53lx_platform_ipp.o(.text.VL53LX_ipp_hist_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = VL53LX_ipp_hist_process_data &rArr; VL53LX_hist_process_data &rArr; VL53LX_f_025 &rArr; VL53LX_f_014 &rArr; VL53LX_f_023 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[db]"></a>VL53LX_is_new_data_ready</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53lx_wait.o(.text.VL53LX_is_new_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_is_new_data_ready &rArr; VL53LX_RdByte
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_GetMeasurementDataReady
</UL>

<P><STRONG><a name="[10e]"></a>VL53LX_isqrt</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_isqrt))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_023
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_006
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_events_consistency_check
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_hist_phase_consistency_check
</UL>

<P><STRONG><a name="[e5]"></a>VL53LX_load_patch</STRONG> (Thumb, 240 bytes, Stack size 272 bytes, vl53lx_api_core.o(.text.VL53LX_load_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = VL53LX_load_patch &rArr; VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_enable_powerforce
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_StartMeasurement
</UL>

<P><STRONG><a name="[103]"></a>VL53LX_low_power_auto_data_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_low_power_auto_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[17b]"></a>VL53LX_low_power_auto_data_stop_range</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_low_power_auto_data_stop_range))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_stop_range
</UL>

<P><STRONG><a name="[134]"></a>VL53LX_low_power_auto_setup_manual_calibration</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_low_power_auto_setup_manual_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_low_power_auto_setup_manual_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[142]"></a>VL53LX_low_power_auto_update_DSS</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_low_power_auto_update_DSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_low_power_auto_update_DSS
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[137]"></a>VL53LX_multizone_hist_bins_update</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_multizone_hist_bins_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_multizone_hist_bins_update
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_copy_hist_bins_to_static_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_device_results
</UL>

<P><STRONG><a name="[163]"></a>VL53LX_nvm_decode_cal_peak_rate_map</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, vl53lx_nvm.o(.text.VL53LX_nvm_decode_cal_peak_rate_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_nvm_decode_cal_peak_rate_map
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_cal_peak_rate_map
</UL>

<P><STRONG><a name="[164]"></a>VL53LX_nvm_enable</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, vl53lx_nvm.o(.text.VL53LX_nvm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53LX_nvm_enable &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrWord
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_disable_firmware
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitUs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_enable_powerforce
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>

<P><STRONG><a name="[167]"></a>VL53LX_nvm_read</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vl53lx_nvm.o(.text.VL53LX_nvm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitUs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>

<P><STRONG><a name="[e9]"></a>VL53LX_poll_for_boot_completion</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vl53lx_wait.o(.text.VL53LX_poll_for_boot_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_poll_for_boot_completion &rArr; VL53LX_WaitValueMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_ll_driver_state
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitUs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitValueMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitDeviceBooted
</UL>

<P><STRONG><a name="[169]"></a>VL53LX_preset_mode_histogram_long_range</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_preset_mode_histogram_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53LX_preset_mode_histogram_long_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_multizone_config_structure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_config_structure
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
</UL>

<P><STRONG><a name="[16d]"></a>VL53LX_preset_mode_histogram_medium_range</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_preset_mode_histogram_medium_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_multizone_config_structure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_config_structure
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
</UL>

<P><STRONG><a name="[16a]"></a>VL53LX_preset_mode_histogram_ranging</STRONG> (Thumb, 306 bytes, Stack size 80 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_preset_mode_histogram_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_multizone_config_structure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_config_structure
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_medium_range
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_short_range
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_long_range
</UL>

<P><STRONG><a name="[16f]"></a>VL53LX_preset_mode_histogram_short_range</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_preset_mode_histogram_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53LX_preset_mode_histogram_short_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_multizone_config_structure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_histogram_config_structure
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_preset_mode
</UL>

<P><STRONG><a name="[16e]"></a>VL53LX_preset_mode_standard_ranging</STRONG> (Thumb, 358 bytes, Stack size 28 bytes, vl53lx_api_preset_modes.o(.text.VL53LX_preset_mode_standard_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53LX_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_ranging
</UL>

<P><STRONG><a name="[11b]"></a>VL53LX_range_maths</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, vl53lx_core_support.o(.text.VL53LX_range_maths))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_range_maths
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_019
</UL>

<P><STRONG><a name="[10d]"></a>VL53LX_rate_maths</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_rate_maths))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_018
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_001
</UL>

<P><STRONG><a name="[119]"></a>VL53LX_rate_per_spad_maths</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53lx_core_support.o(.text.VL53LX_rate_per_spad_maths))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_f_018
</UL>

<P><STRONG><a name="[170]"></a>VL53LX_read_nvm_additional_offset_cal_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vl53lx_nvm.o(.text.VL53LX_read_nvm_additional_offset_cal_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53LX_read_nvm_additional_offset_cal_data &rArr; VL53LX_read_nvm_raw_data &rArr; VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[171]"></a>VL53LX_read_nvm_cal_peak_rate_map</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, vl53lx_nvm.o(.text.VL53LX_read_nvm_cal_peak_rate_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53LX_read_nvm_cal_peak_rate_map &rArr; VL53LX_read_nvm_raw_data &rArr; VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_decode_cal_peak_rate_map
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[172]"></a>VL53LX_read_nvm_fmt_range_results_data</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, vl53lx_nvm.o(.text.VL53LX_read_nvm_fmt_range_results_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53LX_read_nvm_fmt_range_results_data &rArr; VL53LX_read_nvm_raw_data &rArr; VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_i2c_decode_uint16_t
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[173]"></a>VL53LX_read_nvm_optical_centre</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53lx_nvm.o(.text.VL53LX_read_nvm_optical_centre))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53LX_read_nvm_optical_centre &rArr; VL53LX_read_nvm_raw_data &rArr; VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_p2p_data
</UL>

<P><STRONG><a name="[e1]"></a>VL53LX_read_nvm_raw_data</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, vl53lx_nvm.o(.text.VL53LX_read_nvm_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53LX_read_nvm_raw_data &rArr; VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_nvm_enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_enable_firmware
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_disable_powerforce
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_fmt_range_results_data
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_additional_offset_cal_data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_cal_peak_rate_map
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_optical_centre
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[f5]"></a>VL53LX_read_p2p_data</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, vl53lx_api_core.o(.text.VL53LX_read_p2p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53LX_read_p2p_data &rArr; VL53LX_read_nvm_cal_peak_rate_map &rArr; VL53LX_read_nvm_raw_data &rArr; VL53LX_nvm_read &rArr; VL53LX_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_row_col
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_RdWord
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_fmt_range_results_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_mm_effective_spads
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_additional_offset_cal_data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_cal_peak_rate_map
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_read_nvm_optical_centre
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_copy_rtn_good_spads_to_buffer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_nvm_copy_data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_customer_nvm_managed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_get_static_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[174]"></a>VL53LX_run_device_test</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vl53lx_api_calibration.o(.text.VL53LX_run_device_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53LX_run_device_test &rArr; VL53LX_wait_for_test_completion &rArr; VL53LX_WaitValueMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_clear_interrupt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_wait_for_test_completion
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_start_test
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_RdByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_ref_spad_char
</UL>

<P><STRONG><a name="[e0]"></a>VL53LX_run_ref_spad_char</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, vl53lx_api_calibration.o(.text.VL53LX_run_ref_spad_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53LX_run_ref_spad_char &rArr; VL53LX_run_device_test &rArr; VL53LX_wait_for_test_completion &rArr; VL53LX_WaitValueMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_ReadMulti
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_device_test
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_ref_spad_char_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_enable_powerforce
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[15c]"></a>VL53LX_save_cfg_data</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_save_cfg_data))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[d7]"></a>VL53LX_set_dmax_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53lx_api_core.o(.text.VL53LX_set_dmax_mode))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[d4]"></a>VL53LX_set_preset_mode</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, vl53lx_api_core.o(.text.VL53LX_set_preset_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = VL53LX_set_preset_mode &rArr; VL53LX_preset_mode_histogram_medium_range &rArr; VL53LX_preset_mode_histogram_ranging &rArr; VL53LX_init_histogram_config_structure
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V53L1_init_zone_results_structure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_timeout_register_values
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_medium_range
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_short_range
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_preset_mode_histogram_long_range
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDistanceMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[177]"></a>VL53LX_set_ref_spad_char_config</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, vl53lx_core.o(.text.VL53LX_set_ref_spad_char_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53LX_set_ref_spad_char_config &rArr; VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrWord
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_pll_period_us
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_decode_vcsel_period
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_ref_spad_char
</UL>

<P><STRONG><a name="[179]"></a>VL53LX_set_system_control</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vl53lx_register_funcs.o(.text.VL53LX_set_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53LX_set_system_control &rArr; VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_stop_range
</UL>

<P><STRONG><a name="[d6]"></a>VL53LX_set_timeouts_us</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vl53lx_api_core.o(.text.VL53LX_set_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53LX_set_timeouts_us &rArr; VL53LX_calc_timeout_register_values
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_calc_timeout_register_values
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetDistanceMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_DataInit
</UL>

<P><STRONG><a name="[e4]"></a>VL53LX_set_zone_config</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vl53lx_api_core.o(.text.VL53LX_set_zone_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_set_zone_config
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_SetUserROI
</UL>

<P><STRONG><a name="[175]"></a>VL53LX_start_test</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_start_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_start_test &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_device_test
</UL>

<P><STRONG><a name="[e7]"></a>VL53LX_stop_range</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, vl53lx_api_core.o(.text.VL53LX_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53LX_stop_range &rArr; VL53LX_set_system_control &rArr; VL53LX_WriteMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_low_power_auto_data_stop_range
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V53L1_init_zone_dss_configs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_set_system_control
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V53L1_init_zone_results_structure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_StopMeasurement
</UL>

<P><STRONG><a name="[e8]"></a>VL53LX_unload_patch</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vl53lx_api_core.o(.text.VL53LX_unload_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53LX_unload_patch &rArr; VL53LX_disable_powerforce &rArr; VL53LX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_disable_powerforce
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_StopMeasurement
</UL>

<P><STRONG><a name="[15f]"></a>VL53LX_update_ll_driver_cfg_state</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, vl53lx_core.o(.text.VL53LX_update_ll_driver_cfg_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53LX_update_ll_driver_cfg_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[15e]"></a>VL53LX_update_ll_driver_rd_state</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_update_ll_driver_rd_state))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_init_and_start_range
</UL>

<P><STRONG><a name="[176]"></a>VL53LX_wait_for_test_completion</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, vl53lx_wait.o(.text.VL53LX_wait_for_test_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53LX_wait_for_test_completion &rArr; VL53LX_WaitValueMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_RdByte
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitValueMaskEx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_run_device_test
</UL>

<P><STRONG><a name="[101]"></a>VL53LX_xtalk_cal_data_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vl53lx_core.o(.text.VL53LX_xtalk_cal_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53LX_data_init
</UL>

<P><STRONG><a name="[60]"></a>fputc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, custom.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; MX_TOF_Init &rArr; BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17d]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18e]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[bc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[18f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[190]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[191]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ba]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putchar &rArr; fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[b4]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, stm32h5xx_hal_i2c.o(.text.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[93]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[91]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[92]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[90]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[a4]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32h5xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[17e]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[181]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
